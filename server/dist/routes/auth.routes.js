"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_controller_1 = require("../controllers/auth.controller");
const user_controller_1 = require("../controllers/user.controller");
const auth_middleware_1 = require("../middleware/auth.middleware");
const types_1 = require("../types");
const router = (0, express_1.Router)();
const authController = new auth_controller_1.AuthController();
const userController = new user_controller_1.UserController();
router.post("/register", auth_middleware_1.authRateLimit, auth_controller_1.AuthController.registerValidation, authController.register);
router.post("/login", auth_middleware_1.authRateLimit, auth_controller_1.AuthController.loginValidation, authController.login);
router.post("/refresh-token", auth_middleware_1.authRateLimit, authController.refreshToken);
router.post("/forgot-password", auth_middleware_1.authRateLimit, authController.requestPasswordReset);
router.use(auth_middleware_1.authenticateToken);
router.get("/profile", authController.getProfile);
router.put("/change-password", auth_controller_1.AuthController.changePasswordValidation, authController.changePassword);
router.get("/sessions", authController.getSessions);
router.delete("/sessions/:sessionId", authController.revokeSession);
router.post("/logout", authController.logout);
router.post("/logout-all", authController.logoutAllSessions);
router.get("/users", (0, auth_middleware_1.requirePermissions)([types_1.Permission.ADMIN_READ]), userController.getAllUsers);
router.get("/users/:uid", (0, auth_middleware_1.requirePermissions)([types_1.Permission.ADMIN_READ]), userController.getUserById);
router.put("/users/:uid", (0, auth_middleware_1.requirePermissions)([types_1.Permission.ADMIN_WRITE]), userController.updateUser);
router.post("/users/:uid/assign-role", (0, auth_middleware_1.requirePermissions)([types_1.Permission.ROLE_WRITE]), userController.assignRole);
router.delete("/users/:uid/remove-role", (0, auth_middleware_1.requirePermissions)([types_1.Permission.ROLE_WRITE]), userController.removeRole);
router.put("/users/:uid/deactivate", (0, auth_middleware_1.requirePermissions)([types_1.Permission.ADMIN_WRITE]), userController.deactivateUser);
router.put("/users/:uid/activate", (0, auth_middleware_1.requirePermissions)([types_1.Permission.ADMIN_WRITE]), userController.activateUser);
router.get("/roles", (0, auth_middleware_1.requirePermissions)([types_1.Permission.ROLE_READ]), userController.getAllRoles);
router.post("/roles", (0, auth_middleware_1.requireRoles)([types_1.UserRoles.SUPER_ADMIN]), userController.createRole);
router.put("/roles/:roleId", (0, auth_middleware_1.requireRoles)([types_1.UserRoles.SUPER_ADMIN]), userController.updateRole);
router.delete("/roles/:roleId", (0, auth_middleware_1.requireRoles)([types_1.UserRoles.SUPER_ADMIN]), userController.deleteRole);
router.get("/audit-logs", (0, auth_middleware_1.requirePermissions)([types_1.Permission.SYSTEM_LOGS]), userController.getAuditLogs);
router.get("/security-events", (0, auth_middleware_1.requirePermissions)([types_1.Permission.SYSTEM_LOGS]), userController.getSecurityEvents);
exports.default = router;
//# sourceMappingURL=auth.routes.js.map